// <auto-generated />
using System;
using AVPermitSystemV2.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AVPermitSystemV2.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250730205757_AddVehicleSpecifications")]
    partial class AddVehicleSpecifications
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("AVPermitSystemV2.Domain.Entities.Axle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AxleGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("LoadKg")
                        .HasColumnType("TEXT");

                    b.Property<int>("Position")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TyreCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TyreSize")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AxleGroupId");

                    b.ToTable("Axles");
                });

            modelBuilder.Entity("AVPermitSystemV2.Domain.Entities.AxleGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ComponentId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Position")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("SpacingMm")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("UnladenMass")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.ToTable("AxleGroups");
                });

            modelBuilder.Entity("AVPermitSystemV2.Domain.Entities.ComponentDimension", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ComponentId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("FrontOverhangMm")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("HeightMm")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("LeftOverhangMm")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("LengthMm")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("RearOverhangMm")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("RightOverhangMm")
                        .HasColumnType("TEXT");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("WidthMm")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId")
                        .IsUnique();

                    b.ToTable("ComponentDimensions");
                });

            modelBuilder.Entity("AVPermitSystemV2.Domain.Entities.ComponentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ComponentTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "PM",
                            Description = "Main truck unit",
                            IsActive = true,
                            Name = "Prime Mover"
                        },
                        new
                        {
                            Id = 2,
                            Code = "ST",
                            Description = "Semi-trailer",
                            IsActive = true,
                            Name = "Semi-trailer"
                        },
                        new
                        {
                            Id = 3,
                            Code = "DL",
                            Description = "Converter dolly",
                            IsActive = true,
                            Name = "Dolly"
                        },
                        new
                        {
                            Id = 4,
                            Code = "DT",
                            Description = "Dog trailer",
                            IsActive = true,
                            Name = "Dog Trailer"
                        });
                });

            modelBuilder.Entity("AVPermitSystemV2.Domain.Entities.CraneSpecification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BoomType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CertificationExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CertificationStandard")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ControlType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("CounterweightKg")
                        .HasColumnType("TEXT");

                    b.Property<string>("CraneType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasAntiTwoBlocking")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasLoadMomentIndicator")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastInspectionDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("MaxLiftingCapacityKg")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("MaxLiftingHeightM")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("MaxReachM")
                        .HasColumnType("TEXT");

                    b.Property<int?>("NumberOfAxles")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OperationalLimitations")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("OutriggerExtensionM")
                        .HasColumnType("TEXT");

                    b.Property<string>("OutriggerType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("SafetyFeatures")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<int>("VehicleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("CraneSpecifications");
                });

            modelBuilder.Entity("AVPermitSystemV2.Domain.Entities.Load", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CargoType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsIndivisible")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LoadType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PermitId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("WeightKg")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PermitId")
                        .IsUnique();

                    b.ToTable("Loads");
                });

            modelBuilder.Entity("AVPermitSystemV2.Domain.Entities.LoadDimension", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("HeightMm")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("LengthMm")
                        .HasColumnType("TEXT");

                    b.Property<int>("LoadId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("WidthMm")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LoadId");

                    b.ToTable("LoadDimensions");
                });

            modelBuilder.Entity("AVPermitSystemV2.Domain.Entities.LoadProjection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("LoadId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ProjectionMm")
                        .HasColumnType("TEXT");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LoadId");

                    b.ToTable("LoadProjections");
                });

            modelBuilder.Entity("AVPermitSystemV2.Domain.Entities.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Manufacturers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "",
                            Code = "VOL",
                            ContactEmail = "",
                            ContactPhone = "",
                            CountryCode = "SE",
                            CreatedAt = new DateTime(2025, 7, 30, 20, 57, 57, 210, DateTimeKind.Utc).AddTicks(3197),
                            CreatedBy = "System",
                            IsActive = true,
                            Name = "Volvo Group"
                        },
                        new
                        {
                            Id = 2,
                            Address = "",
                            Code = "MB",
                            ContactEmail = "",
                            ContactPhone = "",
                            CountryCode = "DE",
                            CreatedAt = new DateTime(2025, 7, 30, 20, 57, 57, 210, DateTimeKind.Utc).AddTicks(5032),
                            CreatedBy = "System",
                            IsActive = true,
                            Name = "Mercedes-Benz"
                        },
                        new
                        {
                            Id = 3,
                            Address = "",
                            Code = "SCA",
                            ContactEmail = "",
                            ContactPhone = "",
                            CountryCode = "SE",
                            CreatedAt = new DateTime(2025, 7, 30, 20, 57, 57, 210, DateTimeKind.Utc).AddTicks(5039),
                            CreatedBy = "System",
                            IsActive = true,
                            Name = "Scania"
                        });
                });

            modelBuilder.Entity("AVPermitSystemV2.Domain.Entities.Owner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("OwnerType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("AVPermitSystemV2.Domain.Entities.Permit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Fee")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("PermitNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("PermitTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ValidFromDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ValidToDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("VehicleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PermitNumber")
                        .IsUnique();

                    b.HasIndex("PermitTypeId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Permits");
                });

            modelBuilder.Entity("AVPermitSystemV2.Domain.Entities.PermitConstraint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConstraintType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("PermitId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PermitId");

                    b.ToTable("PermitConstraints");
                });

            modelBuilder.Entity("AVPermitSystemV2.Domain.Entities.PermitRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("PermitId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RouteId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ScheduledDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Sequence")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PermitId");

                    b.HasIndex("RouteId");

                    b.ToTable("PermitRoutes");
                });

            modelBuilder.Entity("AVPermitSystemV2.Domain.Entities.PermitType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Fee")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("ValidityDays")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("PermitTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "STD",
                            Description = "Standard permit",
                            Fee = 50.00m,
                            IsActive = true,
                            Name = "Standard",
                            ValidityDays = 30
                        },
                        new
                        {
                            Id = 2,
                            Code = "ABN",
                            Description = "Abnormal load permit",
                            Fee = 150.00m,
                            IsActive = true,
                            Name = "Abnormal Load",
                            ValidityDays = 7
                        },
                        new
                        {
                            Id = 3,
                            Code = "ANN",
                            Description = "Annual permit",
                            Fee = 500.00m,
                            IsActive = true,
                            Name = "Annual",
                            ValidityDays = 365
                        });
                });

            modelBuilder.Entity("AVPermitSystemV2.Domain.Entities.Route", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DistanceKm")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Waypoints")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("AVPermitSystemV2.Domain.Entities.TrailerSpecification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("AxleSpacingMm")
                        .HasColumnType("TEXT");

                    b.Property<string>("BrakeType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("CouplingType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("DeckHeightFromGroundMm")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("DeckLengthMm")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("DeckWidthMm")
                        .HasColumnType("TEXT");

                    b.Property<string>("FloorMaterial")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("FloorThicknessMm")
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasABS")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasTarps")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasTieDownPoints")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasWinch")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("KingpinToRearAxleMm")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoadingInstructions")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("LoadingRampLengthMm")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("LoadingRampWidthMm")
                        .HasColumnType("TEXT");

                    b.Property<int?>("NumberOfAxles")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NumberOfTieDownPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NumberOfTyres")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SideBoardType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("SpecialFeatures")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("SuspensionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("TrailerType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("TyreSize")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<int>("VehicleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("TrailerSpecifications");
                });

            modelBuilder.Entity("AVPermitSystemV2.Domain.Entities.TruckSpecification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AdditionalFeatures")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("BrakeType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("CabType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DriveConfiguration")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("EmissionStandard")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("EngineCapacityLitres")
                        .HasColumnType("TEXT");

                    b.Property<string>("EngineType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("FuelTankCapacityLitres")
                        .HasColumnType("TEXT");

                    b.Property<string>("FuelType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasABS")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasESC")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasRetarder")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("MaxTowingCapacityKg")
                        .HasColumnType("TEXT");

                    b.Property<int?>("NumberOfGears")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("PowerKw")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("TorqueNm")
                        .HasColumnType("TEXT");

                    b.Property<string>("TransmissionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<int>("VehicleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("TruckSpecifications");
                });

            modelBuilder.Entity("AVPermitSystemV2.Domain.Entities.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("FrontOverhangMm")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("GrossVehicleMass")
                        .HasColumnType("TEXT");

                    b.Property<int>("HeightMm")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LengthMm")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("RearOverhangMm")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("UnladenMass")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("VIN")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("TEXT");

                    b.Property<int?>("VehicleCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WheelbaseMm")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WidthMm")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("YearOfManufacture")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("VIN")
                        .IsUnique();

                    b.HasIndex("VehicleCategoryId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("AVPermitSystemV2.Domain.Entities.VehicleCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("MaxHeightMm")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MaxLengthMm")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MaxWeightKg")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MaxWidthMm")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("VehicleCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Standard commercial vehicle limits",
                            IsActive = true,
                            MaxHeightMm = 4300m,
                            MaxLengthMm = 18500m,
                            MaxWeightKg = 56000m,
                            MaxWidthMm = 2550m,
                            Name = "Standard Commercial"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Abnormal load vehicle category",
                            IsActive = true,
                            MaxHeightMm = 6000m,
                            MaxLengthMm = 50000m,
                            MaxWeightKg = 200000m,
                            MaxWidthMm = 4500m,
                            Name = "Abnormal Load"
                        });
                });

            modelBuilder.Entity("AVPermitSystemV2.Domain.Entities.VehicleComponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ComponentTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ManufacturerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Mass")
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Position")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<int>("VehicleId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("YearOfManufacture")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ComponentTypeId");

                    b.HasIndex("VehicleId", "Position")
                        .IsUnique();

                    b.ToTable("VehicleComponents");
                });

            modelBuilder.Entity("AVPermitSystemV2.Domain.Entities.VehicleEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AdditionalData")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("EventType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("RecordedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<int>("VehicleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleEvents");
                });

            modelBuilder.Entity("AVPermitSystemV2.Domain.Entities.VehicleOwnership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPrimaryOwner")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<int>("VehicleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleOwnerships");
                });

            modelBuilder.Entity("AVPermitSystemV2.Domain.Entities.VehicleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("VehicleTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Commercial truck",
                            IsActive = true,
                            Name = "Truck"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Trailer unit",
                            IsActive = true,
                            Name = "Trailer"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Mobile crane",
                            IsActive = true,
                            Name = "Crane"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Semi-trailer unit",
                            IsActive = true,
                            Name = "Semi-trailer"
                        });
                });

            modelBuilder.Entity("AVPermitSystemV2.Domain.Entities.Axle", b =>
                {
                    b.HasOne("AVPermitSystemV2.Domain.Entities.AxleGroup", "AxleGroup")
                        .WithMany("Axles")
                        .HasForeignKey("AxleGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AxleGroup");
                });

            modelBuilder.Entity("AVPermitSystemV2.Domain.Entities.AxleGroup", b =>
                {
                    b.HasOne("AVPermitSystemV2.Domain.Entities.VehicleComponent", "Component")
                        .WithMany("AxleGroups")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Component");
                });

            modelBuilder.Entity("AVPermitSystemV2.Domain.Entities.ComponentDimension", b =>
                {
                    b.HasOne("AVPermitSystemV2.Domain.Entities.VehicleComponent", "Component")
                        .WithOne("Dimensions")
                        .HasForeignKey("AVPermitSystemV2.Domain.Entities.ComponentDimension", "ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Component");
                });

            modelBuilder.Entity("AVPermitSystemV2.Domain.Entities.CraneSpecification", b =>
                {
                    b.HasOne("AVPermitSystemV2.Domain.Entities.Vehicle", "Vehicle")
                        .WithOne()
                        .HasForeignKey("AVPermitSystemV2.Domain.Entities.CraneSpecification", "VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("AVPermitSystemV2.Domain.Entities.Load", b =>
                {
                    b.HasOne("AVPermitSystemV2.Domain.Entities.Permit", "Permit")
                        .WithOne("Load")
                        .HasForeignKey("AVPermitSystemV2.Domain.Entities.Load", "PermitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permit");
                });

            modelBuilder.Entity("AVPermitSystemV2.Domain.Entities.LoadDimension", b =>
                {
                    b.HasOne("AVPermitSystemV2.Domain.Entities.Load", "Load")
                        .WithMany("Dimensions")
                        .HasForeignKey("LoadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Load");
                });

            modelBuilder.Entity("AVPermitSystemV2.Domain.Entities.LoadProjection", b =>
                {
                    b.HasOne("AVPermitSystemV2.Domain.Entities.Load", "Load")
                        .WithMany("Projections")
                        .HasForeignKey("LoadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Load");
                });

            modelBuilder.Entity("AVPermitSystemV2.Domain.Entities.Permit", b =>
                {
                    b.HasOne("AVPermitSystemV2.Domain.Entities.PermitType", "PermitType")
                        .WithMany("Permits")
                        .HasForeignKey("PermitTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AVPermitSystemV2.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("Permits")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PermitType");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("AVPermitSystemV2.Domain.Entities.PermitConstraint", b =>
                {
                    b.HasOne("AVPermitSystemV2.Domain.Entities.Permit", "Permit")
                        .WithMany("Constraints")
                        .HasForeignKey("PermitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permit");
                });

            modelBuilder.Entity("AVPermitSystemV2.Domain.Entities.PermitRoute", b =>
                {
                    b.HasOne("AVPermitSystemV2.Domain.Entities.Permit", "Permit")
                        .WithMany("Routes")
                        .HasForeignKey("PermitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AVPermitSystemV2.Domain.Entities.Route", "Route")
                        .WithMany("PermitRoutes")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Permit");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("AVPermitSystemV2.Domain.Entities.TrailerSpecification", b =>
                {
                    b.HasOne("AVPermitSystemV2.Domain.Entities.Vehicle", "Vehicle")
                        .WithOne()
                        .HasForeignKey("AVPermitSystemV2.Domain.Entities.TrailerSpecification", "VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("AVPermitSystemV2.Domain.Entities.TruckSpecification", b =>
                {
                    b.HasOne("AVPermitSystemV2.Domain.Entities.Vehicle", "Vehicle")
                        .WithOne()
                        .HasForeignKey("AVPermitSystemV2.Domain.Entities.TruckSpecification", "VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("AVPermitSystemV2.Domain.Entities.Vehicle", b =>
                {
                    b.HasOne("AVPermitSystemV2.Domain.Entities.Manufacturer", "Manufacturer")
                        .WithMany("Vehicles")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AVPermitSystemV2.Domain.Entities.VehicleCategory", "VehicleCategory")
                        .WithMany()
                        .HasForeignKey("VehicleCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AVPermitSystemV2.Domain.Entities.VehicleType", "VehicleType")
                        .WithMany()
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Manufacturer");

                    b.Navigation("VehicleCategory");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("AVPermitSystemV2.Domain.Entities.VehicleComponent", b =>
                {
                    b.HasOne("AVPermitSystemV2.Domain.Entities.ComponentType", "ComponentType")
                        .WithMany("VehicleComponents")
                        .HasForeignKey("ComponentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AVPermitSystemV2.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("Components")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComponentType");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("AVPermitSystemV2.Domain.Entities.VehicleEvent", b =>
                {
                    b.HasOne("AVPermitSystemV2.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("Events")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("AVPermitSystemV2.Domain.Entities.VehicleOwnership", b =>
                {
                    b.HasOne("AVPermitSystemV2.Domain.Entities.Owner", "Owner")
                        .WithMany("VehicleOwnerships")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AVPermitSystemV2.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("Ownerships")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("AVPermitSystemV2.Domain.Entities.AxleGroup", b =>
                {
                    b.Navigation("Axles");
                });

            modelBuilder.Entity("AVPermitSystemV2.Domain.Entities.ComponentType", b =>
                {
                    b.Navigation("VehicleComponents");
                });

            modelBuilder.Entity("AVPermitSystemV2.Domain.Entities.Load", b =>
                {
                    b.Navigation("Dimensions");

                    b.Navigation("Projections");
                });

            modelBuilder.Entity("AVPermitSystemV2.Domain.Entities.Manufacturer", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("AVPermitSystemV2.Domain.Entities.Owner", b =>
                {
                    b.Navigation("VehicleOwnerships");
                });

            modelBuilder.Entity("AVPermitSystemV2.Domain.Entities.Permit", b =>
                {
                    b.Navigation("Constraints");

                    b.Navigation("Load");

                    b.Navigation("Routes");
                });

            modelBuilder.Entity("AVPermitSystemV2.Domain.Entities.PermitType", b =>
                {
                    b.Navigation("Permits");
                });

            modelBuilder.Entity("AVPermitSystemV2.Domain.Entities.Route", b =>
                {
                    b.Navigation("PermitRoutes");
                });

            modelBuilder.Entity("AVPermitSystemV2.Domain.Entities.Vehicle", b =>
                {
                    b.Navigation("Components");

                    b.Navigation("Events");

                    b.Navigation("Ownerships");

                    b.Navigation("Permits");
                });

            modelBuilder.Entity("AVPermitSystemV2.Domain.Entities.VehicleComponent", b =>
                {
                    b.Navigation("AxleGroups");

                    b.Navigation("Dimensions");
                });
#pragma warning restore 612, 618
        }
    }
}
